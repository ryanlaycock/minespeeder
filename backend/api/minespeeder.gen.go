// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ActionType.
const (
	ActionTypeFlag   ActionType = "flag"
	ActionTypeReveal ActionType = "reveal"
)

// Defines values for TileState.
const (
	TileStateBomb   TileState = "bomb"
	TileStateEmpty  TileState = "empty"
	TileStateFlag   TileState = "flag"
	TileStateHidden TileState = "hidden"
	TileStateN1     TileState = "1"
	TileStateN2     TileState = "2"
	TileStateN3     TileState = "3"
	TileStateN4     TileState = "4"
	TileStateN5     TileState = "5"
	TileStateN6     TileState = "6"
	TileStateN7     TileState = "7"
	TileStateN8     TileState = "8"
)

// Action An action on a board
type Action struct {
	Type ActionType `json:"type"`
	XPos int        `json:"xPos"`
	YPos int        `json:"yPos"`
}

// ActionType defines model for Action.Type.
type ActionType string

// Board An individual MineSpeeder board, to be controlled by an individual player
type Board struct {
	Height        int    `json:"height"`
	NumberOfBombs int    `json:"numberOfBombs"`
	Tiles         []Tile `json:"tiles"`
	Width         int    `json:"width"`
}

// Tile defines model for tile.
type Tile struct {
	State TileState `json:"state"`
	XPos  int       `json:"xPos"`
	YPos  int       `json:"yPos"`
}

// TileState defines model for Tile.State.
type TileState string

// PostV1GamesGameIdBoardsBoardIdActionsJSONRequestBody defines body for PostV1GamesGameIdBoardsBoardIdActions for application/json ContentType.
type PostV1GamesGameIdBoardsBoardIdActionsJSONRequestBody = Action

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GET a specific board
	// (GET /v1/games/{gameId}/boards/{boardId})
	GetV1GamesGameIdBoardsBoardId(w http.ResponseWriter, r *http.Request, gameId string, boardId string)
	// Create an action on the board
	// (POST /v1/games/{gameId}/boards/{boardId}/actions)
	PostV1GamesGameIdBoardsBoardIdActions(w http.ResponseWriter, r *http.Request, gameId string, boardId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// GET a specific board
// (GET /v1/games/{gameId}/boards/{boardId})
func (_ Unimplemented) GetV1GamesGameIdBoardsBoardId(w http.ResponseWriter, r *http.Request, gameId string, boardId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an action on the board
// (POST /v1/games/{gameId}/boards/{boardId}/actions)
func (_ Unimplemented) PostV1GamesGameIdBoardsBoardIdActions(w http.ResponseWriter, r *http.Request, gameId string, boardId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetV1GamesGameIdBoardsBoardId operation middleware
func (siw *ServerInterfaceWrapper) GetV1GamesGameIdBoardsBoardId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, chi.URLParam(r, "gameId"), &gameId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	// ------------- Path parameter "boardId" -------------
	var boardId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "boardId", runtime.ParamLocationPath, chi.URLParam(r, "boardId"), &boardId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "boardId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1GamesGameIdBoardsBoardId(w, r, gameId, boardId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1GamesGameIdBoardsBoardIdActions operation middleware
func (siw *ServerInterfaceWrapper) PostV1GamesGameIdBoardsBoardIdActions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, chi.URLParam(r, "gameId"), &gameId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	// ------------- Path parameter "boardId" -------------
	var boardId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "boardId", runtime.ParamLocationPath, chi.URLParam(r, "boardId"), &boardId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "boardId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1GamesGameIdBoardsBoardIdActions(w, r, gameId, boardId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/games/{gameId}/boards/{boardId}", wrapper.GetV1GamesGameIdBoardsBoardId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/games/{gameId}/boards/{boardId}/actions", wrapper.PostV1GamesGameIdBoardsBoardIdActions)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVy27bOhD9FWLuXfJadnL7gHZ2UQReFDXaopsgC0oc2UzFR0nKqWDo34sh5cavtFm0",
	"QFekwDmHM2eOhjuorXbWoIkByh2EeoNapK2oo7KGdhJD7ZXLnzA3LB8xa5hglRVeAgfnrUMfFSZw7B3S",
	"iqbTUN6Cxy2KFjg0rVjDHR8DIESvzBoGDt9W9gAJykRco6eT/omTgYPHr53yKOmKRDBGj/yP99jqHutI",
	"bDnfS1UpI9VWyU607J0y+NEhSvS5QM6iZRWy2probduiZFXPxBHItaJHfybFBtV6Ey+XZjpdoX/fLKyu",
	"nqg+qjbzqIg6bf712EAJ/xSPrSvGvhUUnVCZR3gvevp+UDJuniFivo3vk94DTzO9JGy6utydVB+iiEdO",
	"mAGHK+BwDRz+Bw4vgMNL4PAKOLymm5WUaIADahf7vWOob7r6M8bJKfIjA50XSChlGntunYWov6CRbL5a",
	"suCwZo31LG7wyEVroZH9R46xplUmH4YHRIeeKRMcZcMqEWOLKZg8rCJJCgc889USOGzRh3z3bDKdTKlW",
	"69AIp6CE68l0QgI7ETep/GI7K4gxFDtalnIokqdDsUvrUg4UtsZkUmqeoMqWEkq4wfh5dkPgmwRdJOAi",
	"w4B0DM6akHt9NZ3SQv8ImkQmnGtVneiK+5CnSbbqr4ycf9Ok+rHaHzB23oT95GGNtzqpHdBvx+6GTmvh",
	"e8r/7ScmUldUo+pxWA0kjhcaI/oA5e0OFDGTYOR0Er+ELBUcWiX6DvlB/idWHPhFoupArOcy3Q38OW0r",
	"8iBO4jsbLvRvZcNPGjgf4X+/HjkYQ1xY2f82k41P3HA8ESiZ4czaswtvRn4GH0RgtUcRUbLQ1TWG0HRt",
	"259Y8U0KoQnw+HySb384ffgeAAD//7ROaBiNBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
